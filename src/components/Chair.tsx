/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/chair.gltf 
*/

import { useGLTF, useTexture } from '@react-three/drei';
import React from 'react';
import { RepeatWrapping } from 'three';
import { useCustomization } from '../context/CustomizationContextProvider.tsx';

export function Model(props) {
	const { material, legs, chairColor, cushionColor } = useCustomization();

	const { nodes, materials } = useGLTF('/models/chair.gltf');
	const leatherTextureProps = useTexture({
		normalMap: '/textures/leather/Leather_008_Normal.jpg',
		roughnessMap: '/textures/leather/Leather_008_Roughness.jpg',
		aoMap: '/textures/leather/Leather_008_Ambient Occlusion.jpg',
	});

	const fabricTextureProps = useTexture({
		normalMap: '/textures/fabric/Fabric_Knitted_006_normal.jpg',
		roughnessMap: '/textures/fabric/Fabric_Knitted_006_roughness.jpg',
		aoMap: '/textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg',
	});

	leatherTextureProps.aoMap.repeat.set(2, 2);
	leatherTextureProps.normalMap.repeat.set(2, 2);
	leatherTextureProps.roughnessMap.repeat.set(2, 2);

	leatherTextureProps.aoMap.wrapT =
		leatherTextureProps.aoMap.wrapS =
		leatherTextureProps.normalMap.wrapT =
		leatherTextureProps.normalMap.wrapS =
		leatherTextureProps.roughnessMap.wrapT =
		leatherTextureProps.roughnessMap.wrapS =
			RepeatWrapping;

	fabricTextureProps.aoMap.repeat.set(2, 2);
	fabricTextureProps.normalMap.repeat.set(2, 2);
	fabricTextureProps.roughnessMap.repeat.set(2, 2);

	fabricTextureProps.aoMap.wrapT =
		fabricTextureProps.aoMap.wrapS =
		fabricTextureProps.normalMap.wrapT =
		fabricTextureProps.normalMap.wrapS =
		fabricTextureProps.roughnessMap.wrapT =
		fabricTextureProps.roughnessMap.wrapS =
			RepeatWrapping;

	return (
		<group {...props} dispose={null}>
			<mesh geometry={nodes.Chair.geometry}>
				<meshStandardMaterial
					{...(material === 'leather'
						? leatherTextureProps
						: fabricTextureProps)}
					color={chairColor}
				/>
			</mesh>
			<mesh geometry={nodes.Cushion.geometry} position={[0, 0.064, 0.045]}>
				<meshStandardMaterial {...fabricTextureProps} color={cushionColor} />
			</mesh>
			<mesh
				geometry={nodes.Legs1.geometry}
				material={materials.Legs}
				visible={legs === 1}
			/>
			<mesh
				geometry={nodes.Legs2.geometry}
				material={materials.Legs}
				visible={legs === 2}
			/>
		</group>
	);
}

useGLTF.preload('/models/chair.gltf');
